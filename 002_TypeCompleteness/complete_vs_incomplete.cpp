#include <iostream>

// ğŸ§© Incomplete Type (Eksik TÃ¼r) â€” Sadece bildirim yapÄ±lmÄ±ÅŸ
class B; // forward declaration

class A {
private:
    B* b_ptr; // âœ… Incomplete Type yalnÄ±zca pointer olarak kullanÄ±labilir

public:
    A();
    void setB(B* b);
    void print();
};

// âœ… Complete Type â€” B sÄ±nÄ±fÄ± tanÄ±mlanÄ±yor
class B {
private:
    int value;

public:
    B(int v) : value(v) {}
    int getValue() const { return value; }
};

// A'nÄ±n metodlarÄ± tanÄ±mlanÄ±yor
A::A() : b_ptr(nullptr) {}

void A::setB(B* b) {
    b_ptr = b;
}

void A::print() {
    if (b_ptr)
        std::cout << "B'nin deÄŸeri: " << b_ptr->getValue() << std::endl;
    else
        std::cout << "B nesnesi atanmadÄ±!" << std::endl;
}

int main() {
    B b(42);          // âœ… Complete type olduÄŸu iÃ§in nesne oluÅŸturulabilir
    A a;
    a.setB(&b);       // A sÄ±nÄ±fÄ±na B'nin adresi veriliyor
    a.print();        // Ã‡Ä±ktÄ±: B'nin deÄŸeri: 42
    return 0;
}
